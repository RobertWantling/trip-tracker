// 'use strict';

// ignore for prettier
const months = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
];

// all handlers
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

// solve scope by creating global varibale and then reassign it later
let map, mapEvent;

class App {
  constructor() {
    this._getPosition();
  }

  _getPosition() {
    // geolocation api
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(this._loadMap, function () {
        // first callback function need to call loadmap now as in a class can use 'this' - call this callback f here and pass in position argument as soon as current position of user is determined
        alert('could not get your position');
      });
  }

  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(
      `https://www.google.com/maps/@${latitude},${longitude},14z?entry=ttu`
    );
    const coords = [latitude, longitude];
    // whatever string passed into 'map' function must be ID name of element in HTML - it is in   that element where the map is displayed
    map = L.map('map').setView(coords, 13);
    // customised leaflet map
    // L.tileLayer(
    // 'https://{s}.tile.openstreetmap.tiles/outdoors/{z}/{x}/{y}.png',
    // 'https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png',
    // {
    // maxZoom: 20,
    // attribution:
    // '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    // // // '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://  openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a>    contributors',
    // }
    // ).addTo(map);
    // google maps
    L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
      maxZoom: 20,
      subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
    }).addTo(map);
    // 'map' is an object generated by Leaflet - special object with method n properties on it
    // Handling clicks on map
    map.on('click', function (mapE) {
      mapEvent = mapE;
      form.classList.remove('hidden');
      inputDistance.focus();
    });
  }
}

// _showForm();
// _toggleElevationField();
// _newWorkout();

// create object out of this ^^ class (app)
const app = new App();
// trigger geolocation API - method needs to be called
// app._getPosition();

// Constructor method gets executed as soon as the app here is created - meaning it is called immediately when a new object is created from this class ^^ object is created right at beginning when the page loads meaning that the constructor is also executed immediately as page loads

// submit workout form
form.addEventListener('submit', function (e) {
  e.preventDefault();

  // clear input fields
  inputDistance.value =
    inputDuration.value =
    inputCadence.value =
    inputElevation.value =
      '';

  // display marker
  // when a click happens want to show the form
  console.log(mapEvent);
  const { lat, lng } = mapEvent.latlng;

  // adds marker to the map
  L.marker([lat, lng])
    .addTo(map) // trying access map when not in scope
    .bindPopup(
      L.popup({
        // leaflet api reference
        maxWidth: 250,
        minWidth: 100,
        autoClose: false,
        closeOnClick: false,
        className: 'running-popup',
        // all methods for leaflet marker are chainable with 'this'
      })
    )
    .setPopupContent('Asecent Conquored')
    .openPopup();
});

// listen to input of 'type' to allow change to input fields
inputType.addEventListener('change', function (e) {
  // select closest parent from form row - use indistinctive traversal
  // inputElevation.closest('.form__row').classList.toggle('form__row--hidden'); // 'closest method is like an inverse querySelector so selects parents and not children
  // inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  // for multiple options
  if (e.target.value === 'running') {
    inputElevation.closest('.form__row').classList.add('form__row--hidden');
    inputCadence.closest('.form__row').classList.remove('form__row--hidden');
  }
  if (e.target.value === 'cycling') {
    inputElevation.closest('.form__row').classList.remove('form__row--hidden');
    inputCadence.closest('.form__row').classList.add('form__row--hidden');
  }
  if (e.target.value === 'hike') {
    inputElevation.closest('.form__row').classList.remove('form__row--hidden');
    inputCadence.closest('.form__row').classList.add('form__row--hidden');
  }
  if (e.target.value === 'walking') {
    inputElevation.closest('.form__row').classList.add('form__row--hidden');
    inputCadence.closest('.form__row').classList.remove('form__row--hidden');
  }
  if (e.target.value === 'climb') {
  }
});

/*
Architecture: Initial Approach 

1. Decide where and how want to store data (most fundamental part)
 'User Stories' - log running workouts with location, distance, time, pace and steps/minute (cadence)
 - log cycling workouts with location, distance, time, pace and elevation gain 
 - log hiking workouts with location, distance, time, pace and elevation gain 
 - log walking workouts with location, distance, time, pace and elevation gain 
 - log climbing workouts with location, distance, time, pace and grade 

 - Design classes so they can create objects that will hold all this ^^ data

 // click events needs to implement - create dif functions that will handle these events
 load page
 receive position 
 click on map 
 change input 
 submit form 
*/
